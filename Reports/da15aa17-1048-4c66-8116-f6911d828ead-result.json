{"name": "test_report", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span _ngcontent-gug-c22=\"\" class=\"tb-typo--h4 tb-color--grey--700 tb-font-weight--medium\">...</span> is not clickable at point (1363, 48). Other element would receive the click: <div class=\"cdk-overlay-backdrop cdk-overlay-dark-backdrop cdk-overlay-backdrop-showing\"></div>\n  (Session info: chrome=88.0.4324.182)\nStacktrace:\n0   chromedriver                        0x0000000105773e09 chromedriver + 2641417\n1   chromedriver                        0x0000000105dff4b3 chromedriver + 9503923\n2   chromedriver                        0x00000001055169b3 chromedriver + 162227\n3   chromedriver                        0x000000010554be01 chromedriver + 380417\n4   chromedriver                        0x000000010554a56b chromedriver + 374123\n5   chromedriver                        0x00000001055487b4 chromedriver + 366516\n6   chromedriver                        0x0000000105547a77 chromedriver + 363127\n7   chromedriver                        0x000000010553e1aa chromedriver + 324010\n8   chromedriver                        0x0000000105562332 chromedriver + 471858\n9   chromedriver                        0x000000010553df25 chromedriver + 323365\n10  chromedriver                        0x00000001055625ae chromedriver + 472494\n11  chromedriver                        0x0000000105571446 chromedriver + 533574\n12  chromedriver                        0x0000000105562553 chromedriver + 472403\n13  chromedriver                        0x000000010553cae4 chromedriver + 318180\n14  chromedriver                        0x000000010553da87 chromedriver + 322183\n15  chromedriver                        0x0000000105743ab9 chromedriver + 2443961\n16  chromedriver                        0x000000010575089f chromedriver + 2496671\n17  chromedriver                        0x000000010575055b chromedriver + 2495835\n18  chromedriver                        0x000000010572a4c5 chromedriver + 2340037\n19  chromedriver                        0x000000010575147f chromedriver + 2499711\n20  chromedriver                        0x0000000105739049 chromedriver + 2400329\n21  chromedriver                        0x000000010576833f chromedriver + 2593599\n22  chromedriver                        0x0000000105779523 chromedriver + 2663715\n23  libsystem_pthread.dylib             0x00007fff6f522109 _pthread_start + 148\n24  libsystem_pthread.dylib             0x00007fff6f51db8b thread_start + 15", "trace": "self = <test_actilgin.TestLogin object at 0x107c0d940>\n\n    def test_report(self):\n        driver = self.driver\n        rp = RetrievePage(driver)\n>       rp.Report_login()\n\nTestCss/test_actilgin.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages/RetrievePage.py:20: in Report_login\n    self.wg.submit(\"xpath\", self.reports_btn_id)\nPages/WebGeneric.py:19: in submit\n    var.click()\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/webelement.py:85: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/webdriver.py:338: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107c016a0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff6f522109 _pthread_start + 148\\\\n24  libsystem_pthread.dylib             0x00007fff6f51db8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, basestring):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span _ngcontent-gug-c22=\"\" class=\"tb-typo--h4 tb-color--grey--700 tb-font-weight--medium\">...</span> is not clickable at point (1363, 48). Other element would receive the click: <div class=\"cdk-overlay-backdrop cdk-overlay-dark-backdrop cdk-overlay-backdrop-showing\"></div>\nE         (Session info: chrome=88.0.4324.182)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000105773e09 chromedriver + 2641417\nE       1   chromedriver                        0x0000000105dff4b3 chromedriver + 9503923\nE       2   chromedriver                        0x00000001055169b3 chromedriver + 162227\nE       3   chromedriver                        0x000000010554be01 chromedriver + 380417\nE       4   chromedriver                        0x000000010554a56b chromedriver + 374123\nE       5   chromedriver                        0x00000001055487b4 chromedriver + 366516\nE       6   chromedriver                        0x0000000105547a77 chromedriver + 363127\nE       7   chromedriver                        0x000000010553e1aa chromedriver + 324010\nE       8   chromedriver                        0x0000000105562332 chromedriver + 471858\nE       9   chromedriver                        0x000000010553df25 chromedriver + 323365\nE       10  chromedriver                        0x00000001055625ae chromedriver + 472494\nE       11  chromedriver                        0x0000000105571446 chromedriver + 533574\nE       12  chromedriver                        0x0000000105562553 chromedriver + 472403\nE       13  chromedriver                        0x000000010553cae4 chromedriver + 318180\nE       14  chromedriver                        0x000000010553da87 chromedriver + 322183\nE       15  chromedriver                        0x0000000105743ab9 chromedriver + 2443961\nE       16  chromedriver                        0x000000010575089f chromedriver + 2496671\nE       17  chromedriver                        0x000000010575055b chromedriver + 2495835\nE       18  chromedriver                        0x000000010572a4c5 chromedriver + 2340037\nE       19  chromedriver                        0x000000010575147f chromedriver + 2499711\nE       20  chromedriver                        0x0000000105739049 chromedriver + 2400329\nE       21  chromedriver                        0x000000010576833f chromedriver + 2593599\nE       22  chromedriver                        0x0000000105779523 chromedriver + 2663715\nE       23  libsystem_pthread.dylib             0x00007fff6f522109 _pthread_start + 148\nE       24  libsystem_pthread.dylib             0x00007fff6f51db8b thread_start + 15\n\n/Library/Python/3.8/site-packages/selenium/webdriver/remote/errorhandler.py:240: ElementClickInterceptedException"}, "start": 1613565063280, "stop": 1613565068369, "uuid": "4f45fe55-b5db-4833-896b-4055f8050a88", "historyId": "d3cf0dd4dc4227d0adb8ceea2d5e8fe3", "testCaseId": "46c854d8319fbe224ee9d91078dbf84b", "fullName": "TestCss.test_actilgin.TestLogin#test_report", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('test_setup')"}, {"name": "parentSuite", "value": "TestCss"}, {"name": "suite", "value": "test_actilgin"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "Akshays-MacBook-Air.local"}, {"name": "thread", "value": "24901-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCss.test_actilgin"}]}